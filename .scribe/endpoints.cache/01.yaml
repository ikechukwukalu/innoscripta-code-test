## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Auth APIs'
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/user/resend/verify/email
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'User resend email verification.'
      description: 'This endpoint is used to generate and send via email a URL for User email verification to a registered User.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      id:
        name: id
        description: '<small class="badge badge-blue">id</small> Field must belong to a registered User.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      id: '1'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/resend/verify/phone
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'User resend phone verification.'
      description: 'This endpoint is used to generate and send via phone a URL for User phone verification to a registered User.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      id:
        name: id
        description: '<small class="badge badge-blue">id</small> Field must belong to a registered User.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      id: '1'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/change/password
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'User change password.'
      description: |-
        Within the config file, you are required to determine the number
        of previously used passwords a User is not allowed to use anymore
        by setting <b>password.check_all</b> to <b>TRUE/FALSE</b> or to an <b>int</b>
        value and <b>password.number</b> to a corresponding <b>int</b>
        value as well.

        You can choose to notify a User whenever a password is changed by setting
        <b>password.notify.change</b> to <b>TRUE</b>
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: "The user's password."
        required: true
        example: Ex@m122p$%l6E
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for user authentication must contain uppercase, lowercase, symbols, numbers.'
        required: true
        example: '@wE3456qas@$'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match <small class="badge badge-blue">password</small> Field.'
        required: true
        example: '@wE3456qas@$'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: Ex@m122p$%l6E
      password: '@wE3456qas@$'
      password_confirmation: '@wE3456qas@$'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/edit/profile
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'User edit profile.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The full name of the user.'
        required: true
        example: 'John Bison Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email of the user.'
        required: true
        example: johndoe@xyz.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      first_name:
        name: first_name
        description: 'The first name of the user.'
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      middle_name:
        name: middle_name
        description: 'The middle name of the user.'
        required: true
        example: Bison
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: 'The last name of the user.'
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      phone:
        name: phone
        description: 'The phone of the user.'
        required: true
        example: '08012345678'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Bison Doe'
      email: johndoe@xyz.com
      first_name: John
      middle_name: Bison
      last_name: Doe
      phone: '08012345678'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/create-two-factor
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'Create 2FA.'
      description: |-
        To enable Two-Factor Authentication for the User,
        he/she must sync the Shared Secret between its Authenticator
        app and the application.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status": "success",
          "status_code": 200,
          "data": {
               "qr_code": string,
               "uri": string,
               "string": string,
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/confirm-two-factor
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'Confirm 2FA.'
      description: 'Recovery codes will be generated if code is invalid.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      code:
        name: code
        description: 'The authenticator code.'
        required: true
        example: '123 456'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      code: '123 456'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status": "success",
          "status_code": 200,
          "data": {
               "message": string,
               "codes": array,
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/disable-two-factor
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'Disable 2FA.'
      description: 'To disable Two-Factor Authentication for the User.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status": "success",
          "status_code": 200,
          "data": {
               "message": string,
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/current-recovery-codes
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'Get 2FA recovery codes.'
      description: 'The User can retrieve current recovery codes.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status": "success",
          "status_code": 200,
          "data": {
               "message": string,
               "codes": array,
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/new-recovery-codes
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'New 2FA recovery codes.'
      description: |-
        The User can generate a fresh batch of codes which replaces
        the previous batch.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "status": "success",
          "status_code": 200,
          "data": {
               "message": string,
               "codes": array,
           }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/logout
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'User logout.'
      description: 'This API logs a user out of a single session'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/logout-from-all-sessions
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User APIs'
      subgroupDescription: ''
      title: 'User logout from all sessions.'
      description: 'This API logs a user out of every session and clears all user tokens'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/device_token/create
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User Device Token APIs'
      subgroupDescription: ''
      title: 'Create user device token.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      device_token:
        name: device_token
        description: 'The name of the user device token.'
        required: true
        example: 'Sample 333445-123234455-2234555-22223edde'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      device_token: 'Sample 333445-123234455-2234555-22223edde'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/user/device_token/delete
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User Device Token APIs'
      subgroupDescription: ''
      title: 'Delete user device token.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the user device token.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: '1'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/device_token/read/{id?}'
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User Device Token APIs'
      subgroupDescription: ''
      title: 'Read user device token.'
      description: |-
        Fetch a record or records from the user device tokens table.
        The <b>id</b> param is optional but can either be a <b>string|null|int</b>

        If the <b>id</b> has a <b>null</b> value the records will be paginated.
        The returned page size is be set from <b>api.paginate.user_address.pageSize</b>
        config.

        If the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.
        This will return all the records without being paginated.

        If the <b>id</b> value is an <b>integer</b> it will try to fetch a single
        matching record.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the record.'
        required: false
        example: all
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: all
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user/device_token/update
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'User Device Token APIs'
      subgroupDescription: ''
      title: 'Update user device token.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the user device token.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      active:
        name: active
        description: 'Whether or not this user device token will be displayed. 0 for no and 1 yes.'
        required: true
        example: '0'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: '1'
      active: '0'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/user/contact_us/delete
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'Contact Us APIs'
      subgroupDescription: ''
      title: 'Delete contact us message.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the contact us message.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: '1'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/user/contact_us/read/{id?}'
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'Contact Us APIs'
      subgroupDescription: ''
      title: 'Read contact us message.'
      description: |-
        Fetch a record or records from the contact us messages table.
        The <b>id</b> param is optional but can either be a <b>string|null|int</b>

        If the <b>id</b> has a <b>null</b> value the records will be paginated.
        The returned page size is be set from <b>api.paginate.user_address.pageSize</b>
        config.

        If the <b>id</b> is a <b>string</b> value it can only be set as <b>'all'</b>.
        This will return all the records without being paginated.

        If the <b>id</b> value is an <b>integer</b> it will try to fetch a single
        matching record.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the record.'
        required: false
        example: all
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: all
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user/contact_us/update
    metadata:
      groupName: 'Auth APIs'
      groupDescription: ''
      subgroup: 'Contact Us APIs'
      subgroupDescription: ''
      title: 'Update contact us message.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {Your key}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the contact us message.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      message:
        name: message
        description: 'Contact us message.'
        required: false
        example: 'How do you do give discounts'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      reason:
        name: reason
        description: 'The reason for contacting us.'
        required: true
        example: 'I want to make an enquiry'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      type:
        name: type
        description: 'This is the type of enquiry. Can either be complaint, enquiry or support.'
        required: true
        example: inquiry
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: '1'
      message: 'How do you do give discounts'
      reason: 'I want to make an enquiry'
      type: inquiry
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "success": true,
          "status_code": 200,
          "message": string
          "data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
